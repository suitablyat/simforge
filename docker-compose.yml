services:
  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-simforge}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-simforge}
      POSTGRES_DB: ${POSTGRES_DB:-simforge}
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-simforge} -d ${POSTGRES_DB:-simforge}"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio123}
    ports: ["9000:9000", "9001:9001"]
    volumes:
      - minio:/data
    restart: unless-stopped

  mc:
    image: minio/mc
    depends_on:
      - minio
    environment:
      MC_HOST_local: http://$MINIO_ROOT_USER:$MINIO_ROOT_PASSWORD@minio:9000
    command: ["mb", "-p", "local/simforge-artifacts"]
    restart: "no"

  api:
    build:
      context: ./apps/api
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-simforge}:${POSTGRES_PASSWORD:-simforge}@postgres:5432/${POSTGRES_DB:-simforge}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports: ["8000:8000"]
    healthcheck:
      # Python ist im Image vorhanden â†’ simpler HTTP-Check ohne curl/wget
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()"]
      interval: 5s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  worker:
    build:
      context: ./apps/worker
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  web:
    build:
      context: ./apps/web
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:8000}
      NODE_ENV: production
    depends_on:
      api:
        condition: service_started
    ports: ["3000:3000"]
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O- http://localhost:3000 >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
    restart: unless-stopped

  # scheduler:
  #   image: python:3.12-slim
  #   command: bash -lc "pip install --no-cache-dir rq-scheduler redis && rqscheduler --url ${REDIS_URL:-redis://redis:6379/0}"
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped

volumes:
  pgdata:
  minio:
